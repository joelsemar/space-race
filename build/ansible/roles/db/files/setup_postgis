#!/bin/bash

FLAG_FILE=/var/ansible_flags/setup_postgis

if [ -f $FLAG_FILE ] ; then
    exit 0;
fi

# ref: https://docs.djangoproject.com/en/dev/ref/contrib/gis/install/
POSTGIS_SQL_PATH=`pg_config --sharedir`/contrib/postgis-1.5
# Creating the template spatial database.
createdb -E UTF8 -T template0 -l en_US.UTF-8 template_postgis
createlang -d template_postgis plpgsql # Adding PLPGSQL language support.
# Allows non-superusers the ability to create from this template
psql -d postgres -c "UPDATE pg_database SET datistemplate='true' WHERE datname='template_postgis';"
# Loading the PostGIS SQL routines
psql -d template_postgis -f $POSTGIS_SQL_PATH/postgis.sql
psql -d template_postgis -f $POSTGIS_SQL_PATH/spatial_ref_sys.sql
# Enabling users to alter spatial tables.
psql -d template_postgis -c "GRANT ALL ON geometry_columns TO PUBLIC;"
psql -d template_postgis -c "GRANT ALL ON geography_columns TO PUBLIC;"
psql -d template_postgis -c "GRANT ALL ON spatial_ref_sys TO PUBLIC;"
# 
# To reconstruct template1 to match template_postgis:
#cat <<'EOF'
#UPDATE pg_database SET datistemplate = false WHERE datname = 'template1';
#DROP DATABASE template1;
#CREATE DATABASE template1 TEMPLATE template_postgis;
#UPDATE pg_database SET datistemplate = true  WHERE datname = 'template1';
#EOF
# To restore it, same as above with s/template_postgis/template0/
#
# See http://blog.kimiensoftware.com/2011/03/postgresql-dropping-a-template-database-47 for how to drop templates.

touch $FLAG_FILE
